<?php
	
const USE_TXTDEF = true;

$IN_FILE = "tempconv.txt";
$OUT_FILE = "tempconv.asm";

// Purpose: Converts db declarations to fontset.
require "lib/common.php";

$asmfile = file($IN_FILE);
$h = fopen($OUT_FILE, 'w');

const CONV_TABLE_ASCII = [];

const CONV_TABLE_INTRO = [
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	" ",
	"1",
	"9",
	"5",
	"年",
	"。",
	"K",
	"I",
	"N",
	"G",
	"O",
	"F",
	"H",
	"T",
	"E",
	"R",
	"S",
	"を",
	"開",
	"催",
	"す",
	"る",
	"対",
	"戦",
	"方",
	"式",
	"は",
	"前",
	"回",
	"同",
	"様",
	"チ",
	"-",
	"ム",
	"に",
	"て",
	"と",
	"り",
	"行",
	"う",
	"大",
	"会",
	"参",
	"加",
	"者",
	"の",
	"再",
	"心",
	"待",
	"ち",
	"し",
	"い",
	"以",
	"上",
	"・",
	"[",
	"R",
	"]"
];

const CONV_TABLE_WINSCR = [
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	" ",
	"オ", 
	"レ", 
	"の",
	"炎",
	"で",
	"も", 
	"え",
	"つ",
	"き", 
	"ち", 
	"ま", 
	"い",
	"な",
	"!", 
	"よ", 
	"わ",
	"ヤ",
	"ツ", 
	"に",
	"は",
	"う", 
	"ね",
	"ぜ",
	"く", 
	"や",
	"っ", 
	"た",
	"と", 
	"お",
	"が",
	"、", 
	"舌",
	"び",
	"る", 
	"小",
	"羊",
	"み",
	"だ",
	"修",
	"行",
	"し", 
	"て",
	"強",
	"れ",
	"そ", 
	"以",
	"上",
	"を", 
	"私",
	"ど", 
	"こ", 
	"ん",
	"か",
	"ぁ", 
	"。", 
	"ぱ",
	"り", 
	"さ", 
	"テ", 
	"へ",
	"技",
	"根",
	"性",
	"ぃ", 
	"マ", 
	"ジ",
	"戦",
	"ゅ", 
	"ば",
	"ら", 
	"カ", 
	"べ",
	"あ",
	"士",
	"次",
	"試",
	"合",
	"L", 
	"E", 
	"T", 
	"'", 
	"S", 
	"G", 
	"O", 
	"今",
	"す",
	"せ",
	"ぎ",
	"む",
	"女",
	"ふ",
	"ゆ",
	"け",
	"ム",
	"ダ", 
	"ろ", 
	"忍",
	"術",
	"じ", 
	"ょ", 
	"如",
	"月",
	"流",
	"ゃ",
	"イ", 
	"ヌ", 
	"モ", 
	"ノ", 
	"め",
	"ぶ",
	"存",
	"在",
];
const CONV_TABLE_INTBOSS = [
	" ",
	"ル",
	"ガ",
	"ー",
	"さ",
	"ま",
	"・",
	"。",
	"フ",
	"ッ",
	"、",
	"そ",
	"の",
	"と",
	"お",
	"り",
	"だ",
	"こ",
	"れ",
	"で",
	"い",
	"き",
	"て",
	"め",
	"を",
	"ら",
	"し",
	"た",
	"私",
	"も",
	"や",
	"っ",
	"!",
	"す",
	"ば",
	"ど",
	"ょ",
	"う",
	"ひ",
	"ん",
	"力",
	"に",
	"く",
	"る",
	"オ",
	"わ",
	"が",
	"は",
	"ビ",
	"ジ",
	"ネ",
	"ス",
	"協",
	"な",
	"?",
	"キ",
	"ミ",
	"ち",
	"最",
	"強",
	"人",
	"間",
	"兵",
	"器",
	"か",
	"ぞ",
	"よ",
	"ろ",
	"び",
	"え",
	"み",
	"ず",
	"型",
	"戦",
	"つ",
	"ワ",
	"シ",
	"ク",
	"サ",
	"ナ",
	"ギ",
	"イ",
	"ュ",
	"ウ",
	"あ",
	"せ",
	"ね",
	"ぬ",
	"チ",
	"ム",
	"6",
	"ゅ",
	"じ",
	"け",
	"ハ",
	"ョ",
	"ぜ",
	"タ",
	"！",
	"ぽ",
	"ヤ",
	"ツ",
	"ぶ",
	"3",
];
const CONV_TABLE_RUGALDEFEAT = [
	" ",
	"ク",
	"ッ",
	"、",
	"こ",
	"の",
	"パ",
	"ワ",
	"ー",
	"を",
	"も",
	"っ",
	"て",
	"し",
	"か",
	"ぬ",
	"と",
	"は",
	"・",
	"!",
	"?",
	"な",
	"ん",
	"だ",
	"ら",
	"が",
	"。",
	"ば",
	"私",
	"で",
	"フ",
	"ま",
	"あ",
	"い",
	"せ",
	"ひ",
	"つ",
	"よ",
	"う",
	"す",
	"る",
	"ぎ",
	"り",
	"ず",
	"み",
	"え",
	"そ",
	"き",
	"に",
	"た",
	"お",
	"ょ",
	"く",
];
const CONV_TABLE_EPILOGUE = [
	" ",
	"こ",
	"う",
	"し",
	"て",
	"、",
	"の",
	"チ",
	"ー",
	"ム",
	"は",
	"み",
	"ご",
	"と",
	"ル",
	"ガ",
	"を",
	"た",
	"お",
	"キ",
	"ン",
	"グ",
	"オ",
	"ブ",
	"フ",
	"ァ",
	"イ",
	"タ",
	"ズ",
	"9",
	"5",
	"に",
	"ゆ",
	"よ",
	"・",
	"。",
	"そ",
	"れ",
	"ぞ",
	"あ",
	"ら",
	"な",
	"る",
	"も",
	"く",
	"き",
	"む",
	"か",
	"っ",
	"だ",
	"い",
	"せ",
	"1",
	"年",
	"で",
];

const CONV_TABLE_CHARUNLOCK = [
	" ",
	"奴",
	"は",
	"ま",
	"だ",
	"死",
	"ん",
	"で",
	"お",
	"ら",
	"!",
	"ワ",
	"シ",
	"も",
	"手",
	"助",
	"け",
	"い",
	"た",
	"そ",
	"う",
	"私",
	"の",
	"か",
	"げ",
	"武",
	"者",
	"に",
	"す",
	"ぎ",
	"兵",
	"力",
	"を",
	"え",
	"達",
	"見",
	"せ",
	"て",
	"や",
	"ろ",
	"使",
	"っ",
	"最",
	"強",
	"目",
	"指",
	"が",
	"フ",
	"ハ",
	"ル",
	"ガ",
	"ー",
	"&",
	"<サ2>",
	"イ",
	"ュ",
	"ウ",
	"用",
	"コ",
	"マ",
	"ン",
	"ド",
	"タ",
	"カ",
	"ㇻ",
	"ロ",
	"ゴ",
	"め",
	"セ",
	"レ",
	"ク",
	"ト",
	"3",
	"0",
	"回",
	"な",
	"こ",
	"と",
	"オ",
	"チ",
	"感",
	"じ",
	"る",
	"わ",
	"ナ",
	"2",
	"伝",
	"し",
	"大",
	"自",
	"然",
	"き",
	"倒",
	"下",
	"さ",
	"ア",
	"ム",
	"→",
	"↘",
	"ベ",
	"ヤ",
	"↓",
	"/",
	"←",
	"+",
	"B",
	"ヌ",
	"ツ",
	"ラ",
	"リ",
	"つ",
	"ペ",
	"(",
	"<SUPER>",
	")",
	"エ",
	"れ",
	"ぷ",
	"ザ",
	"ェ",
	"ブ",
	"ジ",
	"ノ",
	"サ",
	"ッ",
	"↖",
	"A",
	"ダ",
	"バ",
	"<ア2>",
	"プ",
	"ス",
	"ギ",
	"テ",
	"み",
	"ば",
	"鬼",
	"む",
	"り",
	"ち",
];

const CONV_TABLE_NAKORURU = [
	" ",
	"ま",
	"ち",
	"な",
	"さ",
	"い",
	"!",
	"私",
	"は",
	"カ",
	"ム",
	"イ",
	"コ",
	"タ",
	"ン",
	"の",
	"戦",
	"士",
	"ナ",
	"ル",
	"大",
	"自",
	"然",
	"に",
	"か",
	"わ",
	"っ",
	"て",
	"あ",
	"た",
	"を",
	"お",
	"し",
	"す",
	"く",
	"ご",
	"オ",
	"ロ",
	"チ",
	"ぞ",
	"・",
	"き",
	"け",
	"る",
	"ん",
	"ケ",
	"ー",
	"ッ",
	"、",
	"マ",
	"ハ",
	"?",
	"え",
	"が",
	"う",
	"ダ",
	"ク",
	"パ",
	"ワ",
	"こ",
	"人",
	"封",
	"じ",
	"で",
	"。",
	"(",
	"も",
	")",
	"そ",
	"と",
	"よ",
	"め",
	"だ",
	"れ",
	"気",
	"フ",
	"ほ",
	"ろ",
	"び",
];

const CONV_TABLE = CONV_TABLE_ASCII;

const LEN_TABLE = [
	'Text_CutsceneIntA0' => 0x0C,
	'Text_CutsceneIntA1S' => 0x12,
	'Text_CutsceneIntA1T' => 0x12,
	'Text_CutsceneIntA2' => 0x12,
	'Text_CutsceneIntA3S' => 0x0E,
	'Text_CutsceneIntA3T' => 0x0E,
	'Text_CutsceneIntB0' => 0x10,
	'Text_CutsceneIntB1' => 0x0C,
	'Text_CutsceneIntB2' => 0x0A,
	'Text_CutsceneSaisyu00S' => 0x06,
	'Text_CutsceneSaisyu00T' => 0x0A,
	'Text_CutsceneSaisyu01' => 0x08,
	'Text_CutsceneSaisyu02' => 0x0E,
	'Text_CutsceneSaisyu03S' => 0x12,
	'Text_CutsceneSaisyu03T' => 0x12,
	'Text_CutsceneSaisyu04' => 0x04,
	'Text_CutsceneSaisyu05S' => 0x0E,
	'Text_CutsceneSaisyu05T' => 0x10,
	'Text_CutsceneSaisyu06S' => 0x12,
	'Text_CutsceneSaisyu06T' => 0x12,
	'Text_CutsceneSaisyu07' => 0x10,
	'Text_CutsceneSaisyu08' => 0x08,
	'Text_CutsceneSaisyu09' => 0x10,
	'Text_CutsceneSaisyu0A' => 0x10,
	'Text_CutsceneSaisyu0B' => 0x06,
	'Text_CutsceneSaisyu0C' => 0x10,
	'Text_CutsceneSaisyu0D' => 0x10,
	'Text_CutsceneSaisyu0E' => 0x0C,
	'Text_CutsceneSaisyu0F' => 0x12,
	'Text_CutsceneSaisyu10' => 0x12,
	'Text_CutsceneRugal0' => 0x0A,
	'Text_CutsceneRugal1' => 0x12,
	'Text_CutsceneRugal2' => 0x08,
	'Text_CutsceneRugal3' => 0x0E,
	'Text_CutsceneRugal4' => 0x0C,
	'Text_CutsceneRugal5' => 0x0C,
	'Text_CutsceneRugalDefeat0' => 0x10,
	'Text_CutsceneRugalDefeat1' => 0x0A,
	'Text_CutsceneRugalDefeat2' => 0x0E,
	'Text_CutsceneRugalDefeat3' => 0x0C,
	'Text_CutsceneRugalDefeat4' => 0x12,
	'Text_CutsceneRugalDefeat5' => 0x0E,
	'Text_CutsceneEpilogue0' => 0x0C,
	'Text_CutsceneEpilogue1' => 0x0E,
	'Text_CutsceneEpilogue2' => 0x04,
	'Text_CutsceneEpilogue3' => 0x0E,
	'Text_CutsceneEpilogue4' => 0x10,
	'Text_CutsceneBossUnlock0' => 0x0C,
	'Text_CutsceneBossUnlock1' => 0x0E,
	'Text_CutsceneBossUnlock2' => 0x10,
	'Text_CutsceneBossUnlock3' => 0x10,
	'Text_CutsceneBossUnlock4' => 0x10,
	'Text_CutsceneBossUnlock5' => 0x10,
	'Text_CutsceneNakoruruUnlock0' => 0x0E,
	'Text_CutsceneNakoruruUnlock1' => 0x0C,
	'Text_CutsceneNakoruruUnlock2' => 0x0E,
	'Text_CutsceneNakoruruUnlock3' => 0x12,
	'Text_CutsceneNakoruru0' => 0x08,
	'Text_CutsceneNakoruru1' => 0x10,
	'Text_CutsceneNakoruru2' => 0x0C,
	'Text_CutsceneNakoruru3' => 0x12,
	'Text_CutsceneNakoruruDefeat0' => 0x10,
	'Text_CutsceneNakoruruDefeat1' => 0x04,
	'Text_CutsceneNakoruruDefeat2' => 0x08,
	'Text_CutsceneNakoruruDefeat3' => 0x0A,
	'Text_CutsceneNakoruruDefeat4' => 0x10,
	'Text_CutsceneNakoruruDefeat5' => 0x04,
	'Text_CutsceneNakoruruDefeat6' => 0x12,
	'Text_CutsceneNakoruruDefeat7' => 0x0A,
	'Text_CutsceneNakoruruDefeat8' => 0x12,
	'Text_CutsceneNakoruruDefeat9' => 0x06,
	'Text_CutsceneNakoruruDefeatA' => 0x06,
	'Text_CutsceneNakoruruDefeatB' => 0x0E,
];

validate_charset(CONV_TABLE);

for ($chnum = $i = 0; $i < count($asmfile);) {
	$label = trim(get_label($asmfile[$i]));
	$is_counted = str_starts_with($label, "TextC") || str_starts_with($label, "TextDef");
	if ($is_counted || str_starts_with($label, "Text")) {
		
		fwrite($h, "{$label}:\r\n");
		
		// Additional field at the beginning for TextDefs
		if (str_starts_with($label, "TextDef")) {
			$addr = get_dw($asmfile, $i);
			fwrite($h, "\tdw \${$addr}\r\n");
			$i += 2;
		}
		
		// Predefined row length
		$rowlen = LEN_TABLE[$label] ?? 0xFFFF;
		
		// String length
		if ($is_counted) {
			$count_str = get_db($asmfile[$i]);
			if (!USE_TXTDEF)
				fwrite($h, "\tdb .end-.start\r\n.start:\r\n");
			++$i;
			$set = iterate_counted_string($asmfile, $count_str, $i);
		} else {
			$set = iterate_delimited($asmfile, $i);
		}

		//print "{$i}\r\n";
		// String
		$b = "";
		$num = 0;
		foreach ($set as $ln) {
			//print $ln."\r\n";
			
			if ($num == $rowlen) {
				fwrite($h, "\tdb \"".escape($b)."\"\r\n");
				$b = "";
				$num = 1;
			} else {
				++$num;
			}
			
			$char = hexdec(get_db($ln));
			if ($char == 255) {
				if ($b === "") {
					fwrite($h, "\tdb C_NL\r\n");
				} else {
					fwrite($h, "\tdb \"".escape($b)."\", C_NL\r\n");
					$b = "";
				}
			} else if (isset(CONV_TABLE[$char])) {
				$b .= CONV_TABLE[$char];
			} else {
				$b .= chr($char);
			}
		}
		if ($b !== "") {
			fwrite($h, "\t".(USE_TXTDEF ? "mTxtDef" : "db")." \"".escape($b)."\"\r\n");
		}
		if ($is_counted && !USE_TXTDEF)
			fwrite($h, ".end:\r\n");
	} else {
		fwrite($h, $asmfile[$i]);
		++$i;
	}
}
fclose($h);

function escape($b) {
	return str_replace('"', '\\"', $b);
}

function iterate_counted_string($asmfile, $count_str, &$i) {
	for ($j = 0, $b = "", $count = hexdec($count_str); $j < $count; $j++) {
		yield $asmfile[$i];
		++$i;
	}
}

function iterate_delimited($asmfile, &$i) {
	yield $asmfile[$i];
	++$i;
	for ($count = count($asmfile); $i < $count && !str_starts_with(trim(get_label($asmfile[$i])), "Text"); ++$i) {
		print "{$i}\r\n";
		yield $asmfile[$i];
	}
}

function validate_charset($set) {
	$counts = [];
	$dupl = [];
	for ($i = 0; $i < count($set); ++$i) {
		$c = $set[$i];
		if ($c != null) {
			if (isset($counts[$c]))
				$dupl[$i] = $c;
			else
				$counts[$c] = 1;
		}
	}
	
	if ($dupl) {
		print "BAD CHARSET\r\n";
		print_r($dupl);
		die;
	}
}